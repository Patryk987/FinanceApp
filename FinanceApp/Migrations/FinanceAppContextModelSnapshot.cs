// <auto-generated />
using System;
using FinanceApp.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinanceApp.Migrations
{
    [DbContext(typeof(FinanceAppContext))]
    partial class FinanceAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FinanceApp.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money")
                        .HasColumnName("amount");

                    b.Property<DateTime>("DataDokumentu")
                        .HasColumnType("date");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdShop")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "FK_2");

                    b.HasIndex(new[] { "IdShop" }, "FK_3");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("FinanceApp.Entities.DocumentPo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("IdDoc")
                        .HasColumnType("int")
                        .HasColumnName("idDoc");

                    b.Property<int>("IdProd")
                        .HasColumnType("int")
                        .HasColumnName("idProd");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("PK_asd");

                    b.HasIndex(new[] { "IdDoc" }, "FK_2");

                    b.HasIndex(new[] { "IdProd" }, "FK_3");

                    b.ToTable("DocumentPos");
                });

            modelBuilder.Entity("FinanceApp.Entities.FamilyGroup", b =>
                {
                    b.Property<int>("IdGroup")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("IdGroup");

                    b.ToTable("FamilyGroup", (string)null);
                });

            modelBuilder.Entity("FinanceApp.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal>("AmountPln")
                        .HasColumnType("money")
                        .HasColumnName("amountPLN");

                    b.Property<decimal>("AmountWal")
                        .HasColumnType("money")
                        .HasColumnName("amountWal");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<short>("TypeOfPayments")
                        .HasColumnType("smallint")
                        .HasColumnName("typeOfPayments");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Waluta")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("waluta");

                    b.HasKey("Id")
                        .HasName("PK_payments");

                    b.HasIndex(new[] { "UserId" }, "FK_2");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("FinanceApp.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("barcode");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IdGroup" }, "FK_2");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("FinanceApp.Entities.ProductGroup", b =>
                {
                    b.Property<int>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("IdGroup");

                    b.ToTable("ProductGroup", (string)null);
                });

            modelBuilder.Entity("FinanceApp.Entities.Saving", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Idpaymants")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_Oszczednosci");

                    b.HasIndex(new[] { "Idpaymants" }, "FK_2");

                    b.ToTable("Savings");
                });

            modelBuilder.Entity("FinanceApp.Entities.Shop", b =>
                {
                    b.Property<int>("IdShop")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdShop");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("FinanceApp.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("IdGroup")
                        .HasColumnType("int");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("password");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("FinanceApp.Entities.Document", b =>
                {
                    b.HasOne("FinanceApp.Entities.Shop", "IdShopNavigation")
                        .WithMany("Documents")
                        .HasForeignKey("IdShop")
                        .IsRequired()
                        .HasConstraintName("FK_IdShop");

                    b.HasOne("FinanceApp.Entities.User", "User")
                        .WithMany("Documents")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_userID");

                    b.Navigation("IdShopNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinanceApp.Entities.DocumentPo", b =>
                {
                    b.HasOne("FinanceApp.Entities.Document", "IdDocNavigation")
                        .WithMany("DocumentPos")
                        .HasForeignKey("IdDoc")
                        .IsRequired()
                        .HasConstraintName("FK_idDoc");

                    b.HasOne("FinanceApp.Entities.Product", "IdProdNavigation")
                        .WithMany("DocumentPos")
                        .HasForeignKey("IdProd")
                        .IsRequired()
                        .HasConstraintName("FK_idProd");

                    b.Navigation("IdDocNavigation");

                    b.Navigation("IdProdNavigation");
                });

            modelBuilder.Entity("FinanceApp.Entities.Payment", b =>
                {
                    b.HasOne("FinanceApp.Entities.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_P_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinanceApp.Entities.Product", b =>
                {
                    b.HasOne("FinanceApp.Entities.ProductGroup", "IdGroupNavigation")
                        .WithMany("Products")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK_idGroup");

                    b.Navigation("IdGroupNavigation");
                });

            modelBuilder.Entity("FinanceApp.Entities.Saving", b =>
                {
                    b.HasOne("FinanceApp.Entities.Payment", "IdpaymantsNavigation")
                        .WithMany("Savings")
                        .HasForeignKey("Idpaymants")
                        .IsRequired()
                        .HasConstraintName("FK_Idpaymants");

                    b.Navigation("IdpaymantsNavigation");
                });

            modelBuilder.Entity("FinanceApp.Entities.Document", b =>
                {
                    b.Navigation("DocumentPos");
                });

            modelBuilder.Entity("FinanceApp.Entities.Payment", b =>
                {
                    b.Navigation("Savings");
                });

            modelBuilder.Entity("FinanceApp.Entities.Product", b =>
                {
                    b.Navigation("DocumentPos");
                });

            modelBuilder.Entity("FinanceApp.Entities.ProductGroup", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FinanceApp.Entities.Shop", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("FinanceApp.Entities.User", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
